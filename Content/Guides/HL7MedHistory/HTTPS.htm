<?xml version="1.0" encoding="utf-8"?>
<html xmlns:MadCap="http://www.madcapsoftware.com/Schemas/MadCap.xsd" xml:lang="en-us" MadCap:lastBlockDepth="6" MadCap:lastHeight="836.6666" MadCap:lastWidth="624">
    <head><title></title>
    </head>
    <body>
        <h1 class="Appendix1" MadCap:autonum="Appendix A: ">HTTPS</h1>
        <p><span style="font-size: 10pt;">This </span><span style="font-size: 10pt;">section </span><span style="font-size: 10pt;">contains supplemental information on th</span><span style="font-size: 10pt;">e usage of HTTPS connectivity. </span><span style="font-size: 10pt;">The flow of a HTTPS transaction requires the following generic steps:</span>
        </p>
        <ol>
            <li style="margin-top: 2pt;margin-bottom: 2pt;font-size: 10pt;">Format the transaction (sending transaction in body)<ol style="list-style-type: lower-alpha;"><li style="margin-top: 2pt;margin-bottom: 2pt;font-size: 10pt;">Setting the HTTP content-type to text/xml if xml or text/plain if not xml.</li><li style="margin-top: 2pt;margin-bottom: 2pt;font-size: 10pt;">Write the transaction to the body</li></ol></li>
            <li style="margin-top: 2pt;margin-bottom: 2pt;font-size: 10pt;">Send the transaction using the POST method</li>
        </ol>
        <p style="font-size: 10pt;">.</p>
        <h2 class="Appendix2" MadCap:autonum="1.1 "><a name="_Toc445209676"></a>HTTP-Level Authentication </h2>
        <p class="BodyText1"><span style="font-size: 10pt;">If a Participant's infrastructure requires that incoming HTTP communication must be authenticated using basic HTTP authentication before being passed along to a business system for processing, </span><span style="font-size: 10pt;">Surescripts</span><span style="font-size: 10pt;"> will format the Authorization property in the HTTP header. Participants that are in need of this feature must notify their </span><span style="font-size: 10pt;">Surescripts</span><span style="font-size: 10pt;"> Implementation Manager during the implementation process.</span>
        </p>
        <p class="BodyText1"><span style="font-size: 10pt;">An example of the HTTP Authorization header formatted by </span><span style="font-size: 10pt;">Surescripts</span><span style="font-size: 10pt;"> for authentication on the participant’s system is below:</span>
        </p>
        <p class="BodyText1Indent2">Authorization: Basic U1VSRVNDUklQVFMtUlhIVUI6Tk9QQVNT</p>
        <p class="BodyText1Indent2">where U1VSRVNDUklQVFMtUlhIVUI6Tk9QQVNT&#160; is the result of base64 encoding “SURESCRIPTS-XHUB:NOPASS” (NOPASS was Surescripts’s password for the receiving participant system in this example)
        </p>
        <p style="margin-left: 36pt;">&#160;</p>
        <h2 class="Appendix2" MadCap:autonum="1.2 "><a name="_Toc445209677"></a>POST Method Snippets</h2>
        <div style="border-top-style: solid;border-top-width: 1pt;border-top-color: black;border-left-style: solid;border-left-width: 1pt;border-left-color: black;border-bottom-style: solid;border-bottom-width: 1pt;border-bottom-color: black;border-right-style: solid;border-right-width: 1pt;border-right-color: black;margin-left: 36pt;">
            <p class="CodeExample">The following Java Code gives an example of how to POST to Surescipts:</p>
            <p class="CodeExample">/**</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160; * Send a transaction to Surescripts MN System</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160; * @param urlString&#160;&#160;&#160; - The url to use.&#160; For example, https://switch.rxhub.net/rxhub</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160; * @param transaction&#160; - The transaction</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160; * @param isXML&#160;&#160;&#160;&#160;&#160;&#160;&#160; - Set to true if this is an XML transaction.</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160; * @return&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; - The response from Surescripts</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160; * @throws Exception&#160;&#160; On any unhandled error.</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160; */</p>
            <p class="CodeExample">&#160;&#160;&#160; public static String sendTransaction(String urlString, String transaction, boolean isXML) </p>
            <p class="CodeExample">throws Exception </p>
            <p class="CodeExample">&#160;&#160;&#160; {</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; OutputStream out;</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; BufferedReader in;</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; HttpURLConnection con;</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; String response = "";</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; int BUFFER_SIZE = 500;</p>
            <p class="CodeExample">&#160;</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; URL url = new URL(urlString);</p>
            <p class="CodeExample">&#160;</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; con = (HttpURLConnection) url.openConnection();</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; con.setDoOutput(true);</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; con.setDoInput(true);</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; con.setRequestMethod("POST");</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; con.setRequestProperty("Content-length", String.valueOf(transaction.length()));</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; con.setRequestProperty("Content-type: ", isXML ? "text/xml" : "text/plain");</p>
            <p class="CodeExample">&#160;</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; out = con.getOutputStream();</p>
            <p class="CodeExample">&#160;</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; // Send the transaction</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; out.write(transaction.getBytes());</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; out.flush();</p>
            <p class="CodeExample">&#160;</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; // The InputStreamReader cannot be created until after the write and</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; // flush have occurred. If it is, the write fails.</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; in = new BufferedReader(new InputStreamReader(con.getInputStream()));</p>
            <p class="CodeExample">&#160;</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; char[] cbuf = new char[BUFFER_SIZE + 1];</p>
            <p class="CodeExample">&#160;</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; // Read the response</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; while (true) {</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; //String line = in.readLine();</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; int numCharRead = in.read(cbuf, 0, BUFFER_SIZE);</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // If -1, it is the end of the file/stream</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; if (numCharRead == -1) {</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; break;</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // Null terminate the final position of the string read into cbuf</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; String line = new String(cbuf, 0, numCharRead);</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; response += line;</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160; </p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; //close the streams</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; in.close();</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; out.close();</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; con.disconnect();</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160; return response;</p>
            <p class="CodeExample">&#160;</p>
            <p class="CodeExample">&#160;&#160;&#160; }</p>
        </div>
        <p>&#160;</p>
        <div style="border-top-style: solid;border-top-width: 1pt;border-top-color: black;border-left-style: solid;border-left-width: 1pt;border-left-color: black;border-bottom-style: solid;border-bottom-width: 1pt;border-bottom-color: black;border-right-style: solid;border-right-width: 1pt;border-right-color: black;margin-left: 36pt;">
            <p class="CodeExample">&#160;</p>
            <p class="CodeExample">The following .NET Code gives an example of how to POST to Surescipts:</p>
            <p class="CodeExample">&#160;</p>
            <p class="CodeExample">/**</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; * Sends a transaction to the Surescripts MN System.</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; * Parameters:</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; *&#160;&#160;&#160; urlString&#160;&#160; --&#160; The URL to send to.&#160; For example https://switch.rxhub.net/rxhub</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; *&#160;&#160;&#160; transaction --&#160; The transaction to submit.</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; * </p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; * Returns the response from the Surescripts MN System.</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; * </p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; * Throws System.Net.WebException if it doesn't get a good response.</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; */</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; public static string sendTransaction(string urlString, string transaction) {&#160;&#160;&#160;&#160;&#160; </p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; ASCIIEncoding encoding=new ASCIIEncoding();</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; byte[] data = encoding.GetBytes(transaction);</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160; </p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; HttpWebRequest req = (HttpWebRequest)WebRequest.Create(urlString);</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; req.Method = "POST";</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; req.ContentLength = data.Length;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; </p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; </p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Stream newStream=req.GetRequestStream();</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; newStream.Write(data,0,data.Length);</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; newStream.Close();</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; </p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; HttpWebResponse res = (HttpWebResponse)req.GetResponse();</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; Stream receiveStream = res.GetResponseStream ();</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160; </p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // Pipes the stream to a higher level stream reader with the </p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; // required encoding format.</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; StreamReader readStream = new StreamReader (receiveStream, Encoding.UTF8);</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; </p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; string response = readStream.ReadToEnd();&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; </p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; res.Close ();</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; readStream.Close (); </p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; </p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; return response;</p>
            <p class="CodeExample">&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; }</p>
            <p class="CodeExample">&#160;</p>
        </div>
        <h2 class="Appendix2" MadCap:autonum="1.3 " style="page-break-before: always;"><a name="_Toc445209678"></a>SSL Information</h2>
        <p class="BodyText1">Surescripts <span style="font-size: 10pt;">expects SSL (HTTPS) traffic on the standard SSL port, 443.</span></p>
        <h2 class="Appendix2" MadCap:autonum="1.4 "><a name="_Toc445209679"></a>Server Certificates</h2>
        <p class="BodyText1">When setting up a webserver to accept SSL, it is necessary to use a digital certificate. The certificate that is used in the production environment must be signed by an established certificate authority, such as VeriSign. In the certification environment, the certificate can be self-signed. In the case of a self-signed cert, it will be necessary to send a copy of the cert to Surescripts so it can be recognized as a valid certificate when Surescripts connects to the site.</p>
    </body>
</html>